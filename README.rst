
TextBlob: Simplified Text Processing
====================================

.. image:: https://badgen.net/pypi/v/TextBlob
    :target: https://pypi.org/project/textblob/
    :alt: Latest version

.. image:: https://github.com/sloria/TextBlob/actions/workflows/build-release.yml/badge.svg
    :target: https://github.com/sloria/TextBlob/actions/workflows/build-release.yml
    :alt: Build status


Homepage: `https://textblob.readthedocs.io/ <https://textblob.readthedocs.io/>`_

`TextBlob` is a Python library for processing textual data. It provides a simple API for diving into common natural language processing (NLP) tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification, and more.


.. code-block:: python

    from textblob import TextBlob

    text = """
    The titular threat of The Blob has always struck me as the ultimate movie
    monster: an insatiably hungry, amoeba-like mass able to penetrate
    virtually any safeguard, capable of--as a doomed doctor chillingly
    describes it--"assimilating flesh on contact.
    Snide comparisons to gelatin be damned, it's a concept with the most
    devastating of potential consequences, not unlike the grey goo scenario
    proposed by technological theorists fearful of
    artificial intelligence run rampant.
    """

    blob = TextBlob(text)
    blob.tags  # [('The', 'DT'), ('titular', 'JJ'),
    #  ('threat', 'NN'), ('of', 'IN'), ...]

    blob.noun_phrases  # WordList(['titular threat', 'blob',
    #            'ultimate movie monster',
    #            'amoeba-like mass', ...])

    for sentence in blob.sentences:
        print(sentence.sentiment.polarity)
    # 0.060
    # -0.341


TextBlob stands on the giant shoulders of `NLTK`_ and `pattern`_, and plays nicely with both.

Features
--------

- Noun phrase extraction
- Part-of-speech tagging
- Sentiment analysis
- Classification (Naive Bayes, Decision Tree)
- Tokenization (splitting text into words and sentences)
- Word and phrase frequencies
- Parsing
- `n`-grams
- Word inflection (pluralization and singularization) and lemmatization
- Spelling correction
- Add new models or languages through extensions
- WordNet integration

Get it now
----------
::

    $ pip install -U textblob
    $ python -m textblob.download_corpora

Examples
--------

See more examples at the `Quickstart guide`_.

.. _`Quickstart guide`: https://textblob.readthedocs.io/en/latest/quickstart.html#quickstart


Documentation
-------------

Full documentation is available at https://textblob.readthedocs.io/.

Project Links
-------------

- Docs: https://textblob.readthedocs.io/
- Changelog: https://textblob.readthedocs.io/en/latest/changelog.html
- PyPI: https://pypi.python.org/pypi/TextBlob
- Issues: https://github.com/sloria/TextBlob/issues

License
-------

MIT licensed. See the bundled `LICENSE <https://github.com/sloria/TextBlob/blob/master/LICENSE>`_ file for more details.

.. _pattern: https://github.com/clips/pattern/
.. _NLTK: http://nltk.org/



---------------------------------------
# SVM Sentiment Analysis Pipeline

This project implements a simple sentiment analysis pipeline using Support Vector Machine (SVM) and `scikit-learn`. The model classifies text into three sentiment categories: positive (1), negative (-1), and neutral (0).


## Features
- Load pre-trained SVM model and CountVectorizer for text feature extraction.
- Predict sentiment for input texts.
- Simple unit tests to validate functionality.

## Installation
To set up the project, ensure you have Python and `pip` installed, then install the required packages:

```bash
pip install scikit-learn joblib
-------------------------------------
Make sure to have the following model files in the project directory:

svm_model.pkl: The trained SVM model.
vectorizer.pkl: The CountVectorizer used to transform input text.
These files can be generated by running the model training section provided below.

.. code-block:: python

    from SVMPipeline import SVMPipeline

    # Create an instance of the pipeline
    pipeline = SVMPipeline()

    # Predict sentiment
    result = pipeline.predict(["I love this product!"])
    print("Predicted Sentiment:", result[0])  # Output will be 1 for positive sentiment

Unit tests are provided to ensure the functionality of the SVMPipeline. You can run the tests using the following command:

python -m unittest discover

The following test cases are included:

test_predict_positive: Tests positive sentiment prediction.
test_predict_negative: Tests negative sentiment prediction.
test_predict_neutral: Tests neutral sentiment prediction.
test_empty_input: Tests the prediction for empty string input.




